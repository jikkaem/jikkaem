// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: internal/proto/fancam/fancam.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FancamClient is the client API for Fancam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FancamClient interface {
	GetFancamByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FancamObjectWithID, error)
	CreateFancams(ctx context.Context, in *FancamObject, opts ...grpc.CallOption) (*FancamObjectWithID, error)
	DeleteFancam(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FancamObjectWithID, error)
}

type fancamClient struct {
	cc grpc.ClientConnInterface
}

func NewFancamClient(cc grpc.ClientConnInterface) FancamClient {
	return &fancamClient{cc}
}

func (c *fancamClient) GetFancamByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FancamObjectWithID, error) {
	out := new(FancamObjectWithID)
	err := c.cc.Invoke(ctx, "/Fancam/GetFancamByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fancamClient) CreateFancams(ctx context.Context, in *FancamObject, opts ...grpc.CallOption) (*FancamObjectWithID, error) {
	out := new(FancamObjectWithID)
	err := c.cc.Invoke(ctx, "/Fancam/CreateFancams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fancamClient) DeleteFancam(ctx context.Context, in *ID, opts ...grpc.CallOption) (*FancamObjectWithID, error) {
	out := new(FancamObjectWithID)
	err := c.cc.Invoke(ctx, "/Fancam/DeleteFancam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FancamServer is the server API for Fancam service.
// All implementations must embed UnimplementedFancamServer
// for forward compatibility
type FancamServer interface {
	GetFancamByID(context.Context, *ID) (*FancamObjectWithID, error)
	CreateFancams(context.Context, *FancamObject) (*FancamObjectWithID, error)
	DeleteFancam(context.Context, *ID) (*FancamObjectWithID, error)
	mustEmbedUnimplementedFancamServer()
}

// UnimplementedFancamServer must be embedded to have forward compatible implementations.
type UnimplementedFancamServer struct {
}

func (UnimplementedFancamServer) GetFancamByID(context.Context, *ID) (*FancamObjectWithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFancamByID not implemented")
}
func (UnimplementedFancamServer) CreateFancams(context.Context, *FancamObject) (*FancamObjectWithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFancams not implemented")
}
func (UnimplementedFancamServer) DeleteFancam(context.Context, *ID) (*FancamObjectWithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFancam not implemented")
}
func (UnimplementedFancamServer) mustEmbedUnimplementedFancamServer() {}

// UnsafeFancamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FancamServer will
// result in compilation errors.
type UnsafeFancamServer interface {
	mustEmbedUnimplementedFancamServer()
}

func RegisterFancamServer(s grpc.ServiceRegistrar, srv FancamServer) {
	s.RegisterService(&Fancam_ServiceDesc, srv)
}

func _Fancam_GetFancamByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FancamServer).GetFancamByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fancam/GetFancamByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FancamServer).GetFancamByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fancam_CreateFancams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FancamObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FancamServer).CreateFancams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fancam/CreateFancams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FancamServer).CreateFancams(ctx, req.(*FancamObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fancam_DeleteFancam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FancamServer).DeleteFancam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fancam/DeleteFancam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FancamServer).DeleteFancam(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// Fancam_ServiceDesc is the grpc.ServiceDesc for Fancam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fancam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Fancam",
	HandlerType: (*FancamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFancamByID",
			Handler:    _Fancam_GetFancamByID_Handler,
		},
		{
			MethodName: "CreateFancams",
			Handler:    _Fancam_CreateFancams_Handler,
		},
		{
			MethodName: "DeleteFancam",
			Handler:    _Fancam_DeleteFancam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/fancam/fancam.proto",
}
