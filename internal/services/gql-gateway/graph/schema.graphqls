# https://gqlgen.com/getting-started/

type Query {
  fancam(input: SingleID!): Fancam
  fancams(input: ListIDs!): [Fancam]!
  latestFancams(input: LatestFancamsInput!): [Fancam!]!
  artist: [Artist]!
  user(input: SingleID!): User
}

type Mutation {
  createUser(input: NewUser!): User!
  deleteUser(input: SingleID!): User!
}

scalar Time

enum Gender {
  MALE
  FEMALE
}

type User {
  id: ID!
  name: String!
  email: String!
}

type Fancam {
  id: ID!
  title: String!
  description: String!
  publishedAt: Time!
  channelID: ID!
  channelTitle: String!
  rootThumbnail: String!
  recordDate: Time
  suggestedTags: SuggestedTags!
  artists: [Artist]!
}

type SuggestedTags {
  enArtist: [String!]!
  enGroup: [String!]!
  enSong: [String!]!
  krArtist: [String!]!
  krGroup: [String!]!
  krSong: [String!]!
}

type Artist {
  id: ID!
  stageName: String!
  fullName: String!
  koreanName: String!
  koreanStageName: String!
  dob: Time
  group: String
  country: String!
  height: Int # add unit type CM
  weight: Float
  birthplace: String!
  gender: Gender!
  instagram: String # link to their profile? username?
}

input SingleID {
  id: ID!
}

input ListIDs {
  ids: [ID!]!
}

input NewUser {
  name: String!
  email: String!
}

input LatestFancamsInput {
  maxResults: Int!
}
