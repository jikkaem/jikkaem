package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"
	pbfc "jikkaem/internal/proto/fancam"
	pbuser "jikkaem/internal/proto/user"
	gqlmodel "jikkaem/internal/services/gql-gateway/graph/model"
	"log"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input gqlmodel.NewUser) (*gqlmodel.User, error) {
	conn, err := grpc.Dial("localhost:6000", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := pbuser.NewUserClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	userObject := &pbuser.UserObject{
		Name:  input.Name,
		Email: input.Email,
	}

	res, err := c.CreateUser(ctx, userObject)
	if err != nil {
		log.Fatalf("could not create user: %v", err)
	}

	gqlUser := &gqlmodel.User{
		ID:    res.Id,
		Name:  res.Name,
		Email: res.Email,
	}

	return gqlUser, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input gqlmodel.SingleID) (*gqlmodel.User, error) {
	conn, err := grpc.Dial("localhost:6000", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := pbuser.NewUserClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	in := &pbuser.ID{
		Id: input.ID,
	}

	res, err := c.DeleteUser(ctx, in)
	if err != nil {
		return nil, err
	}

	gqlUser := &gqlmodel.User{
		ID:    res.Id,
		Name:  res.Name,
		Email: res.Email,
	}
	return gqlUser, nil
}

// Fancam is the resolver for the fancam field.
func (r *queryResolver) Fancam(ctx context.Context, input gqlmodel.SingleID) (*gqlmodel.Fancam, error) {
	conn, err := grpc.Dial("localhost:6001", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := pbfc.NewFancamClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	in := &pbfc.ID{
		Id: input.ID,
	}

	res, err := c.GetFancamByID(ctx, in)
	if err != nil {
		return nil, err
	}

	// Return gql model
	// Get pointer to RecordDate
	recordDate := res.GetRecordDate().AsTime()
	ptrRecordDate := &recordDate

	// Format SuggestedTags
	suggestedTags := &gqlmodel.SuggestedTags{
		EnArtist: res.SuggestedTags.GetEnArtist(),
		EnGroup:  res.SuggestedTags.GetEnGroup(),
		EnSong:   res.SuggestedTags.GetEnSong(),
		KrArtist: res.SuggestedTags.GetKrArtist(),
		KrGroup:  res.SuggestedTags.GetKrGroup(),
		KrSong:   res.SuggestedTags.GetKrSong(),
	}

	// Format Artists
	var artists []*gqlmodel.Artist
	for _, artist := range res.GetArtists() {
		// Get ptr to dob
		dob := artist.GetDob().AsTime()
		ptrDob := &dob
		// Get ptr to height, weight and ig
		intHeight := int(artist.GetHeight())
		ptrHeight := &intHeight
		intWeight := float64(artist.GetWeight())
		ptrWeight := &intWeight
		ig := artist.GetInstagram()
		ptrIg := &ig
		obj := &gqlmodel.Artist{
			ID:              artist.GetId(),
			StageName:       artist.GetStageName(),
			FullName:        artist.GetFullName(),
			KoreanName:      artist.GetKoreanName(),
			KoreanStageName: artist.GetKoreanName(),
			Dob:             ptrDob,
			Group:           &artist.Group,
			Country:         artist.GetCountry(),
			Height:          ptrHeight,
			Weight:          ptrWeight,
			Birthplace:      artist.GetBirthplace(),
			Gender:          gqlmodel.Gender(artist.GetGender().String()),
			Instagram:       ptrIg,
		}

		artists = append(artists, obj)
	}

	gqlFancam := &gqlmodel.Fancam{
		ID:            res.GetId(),
		Title:         res.GetTitle(),
		Description:   res.GetDescription(),
		PublishedAt:   res.GetPublishedAt().AsTime(),
		ChannelID:     res.GetChannelId(),
		ChannelTitle:  res.GetChannelTitle(),
		RootThumbnail: res.GetRootThumbnail(),
		RecordDate:    ptrRecordDate,
		SuggestedTags: suggestedTags,
		Artists:       artists,
	}

	return gqlFancam, nil
}

// Fancams is the resolver for the fancams field.
func (r *queryResolver) Fancams(ctx context.Context, input gqlmodel.ListIDs) ([]*gqlmodel.Fancam, error) {
	panic(fmt.Errorf("not implemented: Fancams - fancams"))
}

// LatestFancams is the resolver for the latestFancams field.
func (r *queryResolver) LatestFancams(ctx context.Context, input gqlmodel.LatestFancamsInput) ([]*gqlmodel.Fancam, error) {
	panic(fmt.Errorf("not implemented: LatestFancams - latestFancams"))
}

// Artist is the resolver for the artist field.
func (r *queryResolver) Artist(ctx context.Context) ([]*gqlmodel.Artist, error) {
	panic(fmt.Errorf("not implemented: Artist - artist"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, input gqlmodel.SingleID) (*gqlmodel.User, error) {
	conn, err := grpc.Dial("localhost:6000", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := pbuser.NewUserClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	in := &pbuser.ID{
		Id: input.ID,
	}

	res, err := c.GetUserByID(ctx, in)
	if err != nil {
		log.Fatalf("could not get user: %v", err)
	}

	gqlUser := &gqlmodel.User{
		ID:    res.Id,
		Name:  res.Name,
		Email: res.Email,
	}

	return gqlUser, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
