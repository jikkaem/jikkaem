package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"
	gqlmodel "jikkaem/internal/services/gql-gateway/graph/model"
	pb "jikkaem/internal/shared/proto/user"
	"log"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input gqlmodel.NewUser) (*gqlmodel.User, error) {
	conn, err := grpc.Dial("localhost:6000", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := pb.NewUserClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	userObject := &pb.UserObject{
		Name:  input.Name,
		Email: input.Email,
	}

	res, err := c.CreateUser(ctx, userObject)
	if err != nil {
		log.Fatalf("could not create user: %v", err)
	}

	gqlUser := &gqlmodel.User{
		ID:    res.Id,
		Name:  res.Name,
		Email: res.Email,
	}

	return gqlUser, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input gqlmodel.SingleID) (*gqlmodel.User, error) {
	conn, err := grpc.Dial("localhost:6000", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := pb.NewUserClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	in := &pb.ID{
		Id: input.ID,
	}

	res, err := c.DeleteUser(ctx, in)
	if err != nil {
		return nil, err
	}

	gqlUser := &gqlmodel.User{
		ID:    res.Id,
		Name:  res.Name,
		Email: res.Email,
	}
	return gqlUser, nil
}

// Fancam is the resolver for the fancam field.
func (r *queryResolver) Fancam(ctx context.Context) ([]*gqlmodel.Fancam, error) {
	panic(fmt.Errorf("not implemented: Fancam - fancam"))
}

// Artist is the resolver for the artist field.
func (r *queryResolver) Artist(ctx context.Context) ([]*gqlmodel.Artist, error) {
	panic(fmt.Errorf("not implemented: Artist - artist"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, input gqlmodel.SingleID) (*gqlmodel.User, error) {
	conn, err := grpc.Dial("localhost:6000", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := pb.NewUserClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	in := &pb.ID{
		Id: input.ID,
	}

	res, err := c.GetUserByID(ctx, in)
	if err != nil {
		log.Fatalf("could not get user: %v", err)
	}

	gqlUser := &gqlmodel.User{
		ID:    res.Id,
		Name:  res.Name,
		Email: res.Email,
	}

	return gqlUser, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
